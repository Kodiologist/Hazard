#!/usr/bin/env python
# encoding: UTF-8
from psychopy import *
import wx
import os
import datetime
import random, math, itertools
import pickle
import numpy
import json

def concat(x):
    return list(itertools.chain.from_iterable(x))

def shuffled(x):
    return random.sample(x, len(x))

def log(f, t):
    f.write('time:\t'+str(t['time']))
    f.write('\t')
    f.write('trial:\t' +str(t['trial']))
    f.write('\t')
    f.write('trial type:\t' +str(t['type']))
    f.write('\t')
    f.write('certainty:\t'+str(t['certainty']))
    f.write('\t')
    f.write('riskmagnitude:\t'+str(t['riskmagnitude']))
    f.write('\t')
    f.write('probability:\t'+str(t['probability']))
    f.write('\t')
    f.write('sharedloss:\t'+str(t['sharedloss']))
    f.write('\t')
    f.write('matchedEVW:\t'+str(t['matchedEVW']))
    f.write('\t')
    f.write('matchedEVL:\t'+str(t['matchedEVL']))
    f.write('\t')
    f.write('rt:\t'+str(t['rt']))
    f.write('\t')
    f.write('choice:\t'+str(t['choice']))
    f.write('\t')
    f.write('outcome:\t'+str(t['outcome']))
    f.write('\t')
    f.write('ttlrew:\t'+str(t['ttlrew']))
    f.write('\n')
    f.flush()


def drawtrial():
    message.setPos([0,.85])
    message.setText('Which would you prefer?')
    message.draw()
    
    if sides:
        if trial['type'] == 'sharedlosslocal':
            message.setPos(rewPos[0])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
    
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[1])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[1])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[1])
            message.setText('Shared Loss with \nLocal Partner')
            message.draw()
            
        elif trial['type'] == 'sharedlossDuane':
            message.setPos(rewPos[0])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
    
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[1])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[1])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[1])
            message.setText('Shared Loss with \nDuane Lab Partner')
            message.draw()
            
        elif trial['type'] == 'sharedlossAsDuane':
            message.setPos(rewPos[0])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
    
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[1])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[1])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[1])
            message.setText('Shared Loss (as Duane Lab \npartner) with Local Partner')
            message.draw()
            
        elif trial['type'] == 'matched':
            message.setPos(rewPos[0])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
            
            per = int(trial['probability']*100)
            per2 = 100 - per
            EVW = trial['matchedEVW']
            EVL = EVW/2
            message.setPos(rewPos[1])
            message.setText(str(per) + '% Win $'+str(EVW))
            message.draw()
            message.setPos(riskPos[1])
            message.setText(str(per2)+'% Lose $'+str(EVL))
            message.draw()
            message.setPos(riskpos3[1])
            message.setText('Full Personal Loss')
            message.draw()
                
        else:
            message.setPos(rewPos[0])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
            
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[1])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[1])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[1])
            message.setText('Full Personal Loss')
            message.draw()
                
    else:
        if trial['type'] == 'sharedlosslocal':
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[0])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[0])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[0])
            message.setText('Shared Loss with \nLocal Partner')
            message.draw()

            message.setPos(rewPos[1])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
            
        elif trial['type'] == 'sharedlossDuane':
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[0])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[0])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[0])
            message.setText('Shared Loss with \nDuane Lab Partner')
            message.draw()

            message.setPos(rewPos[1])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
            
        elif trial['type'] == 'sharedlossAsDuane':
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[0])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[0])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[0])
            message.setText('Shared Loss (as Duane Lab \nPartner) with Local Partner')
            message.draw()

            message.setPos(rewPos[1])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
            
            
        elif trial['type'] == 'matched':
            per = int(trial['probability']*100)
            per2 = 100 - per
            EVW = trial['matchedEVW']
            EVL = EVW/2
            message.setPos(rewPos[0])
            message.setText(str(per) + '% Win $'+str(EVW))
            message.draw()
            message.setPos(riskPos[0])
            message.setText(str(per2)+'% Lose $'+str(EVL))
            message.draw()
            message.setPos(riskpos3[0])
            message.setText('Full Personal Loss')
            message.draw()
            
            message.setPos(rewPos[1])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()
           
            
        else:
            per = int(trial['probability']*100)
            per2 = 100 - per
            message.setPos(rewPos[0])
            message.setText(str(per)+ '% Win ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskPos[0])
            message.setText(str(per2) + '% Lose ' + '$' + str(trial['riskmagnitude']))
            message.draw()
            message.setPos(riskpos3[0])
            message.setText('Full Personal Loss')
            message.draw()

            message.setPos(rewPos[1])
            message.setText('100% Win ' +'$' + str(certainty))
            message.draw()


def drawoutcome(r):
    
    if trial['choice'] == 0:
        rew = certainty
        
    else:
        if trial['type'] == 'sharedlosseslocal':
            if random.random() < trial['probability']:
                rew = trial['riskmagnitude']
                
            else:
                rew = -trial['riskmagnitude']/2
                
        elif trial['type'] == 'sharedlossesDuane':
            if random.random() < trial['probability']:
                rew = trial['riskmagnitude']
                
            else:
                rew = -trial['riskmagnitude']/2
                
        elif trial['type'] == 'sharedlossesAsDuane':
            if random.random() < trial['probability']:
                rew = trial['riskmagnitude']
                
            else:
                rew = -trial['riskmagnitude']/2
                
        elif trial['type'] == 'matched':
            if random.random() < trial['probability']:
                rew = trial['matchedEVW']
                
            else:
                rew = -trial['matchedEVW']/2
        
        else:
            if random.random() < trial['probability']:
                rew = trial['riskmagnitude']
                
            else:
                rew = -trial['riskmagnitude']
                
    return rew

person_types = dict(
    best_friend = "Your best friend",
    parent = "The parent or stepparent you're closest to",
    friend_of_friend = "A friend of a friend",
    childhood_friend = "A childhood friend you haven't spoken to in years",
    local_partner = "Your local partner",
    occ_relative = "A relative you see no more than a few times a year",
    doctor = "Your primary physician",
    cashier = "A cashier at a store (or a university eatery)\nthat you go to often",
    remote_partner = "Your Duane Lab partner",
    unmet_classmate = "A classmate you can recognize but\nyou've never spoken to",
    dead_relative = "A relative who you know a least a little about but\nwho died before you were born",
    stranger = "A stranger you've seen once or a few times and\nwho you know nothing about")

#--------------------------------------------------INITIALISE DATA STRUCTURE

expData = []

certainty = 15
riskymagnitudes = [20,30,40,50,60]
#sharedloss20 = [16,32,48]
#sharedloss50 = [10,20,30]
#matchedrisky = [10,20,30,40,60]
matchedEVW = [20,30,40,50,60]
probabilities = [.5,.6,.7,.8]
#percents = [50,60,70,80,90]
#sharedlosses = [20,50]
sharedlosses = [50]


for riskymagnitude in riskymagnitudes:
    for probability in probabilities:
        for hazard in sharedlosses:
            trial = {}
            trial['certainty'] = certainty
            trial['riskmagnitude'] = riskymagnitude
            trial['probability'] = probability
            trial['sharedloss'] = hazard
            trial['matchedEVW'] = -77
            trial['matchedEVL'] = -77
            trial['rt'] = -77 
            trial['choice'] = -77
            trial['outcome'] = -77
            trial['ttlrew'] = -77
            trial['type'] = 'sharedlosslocal'
            expData.append(trial)
            
for riskymagnitude in riskymagnitudes:
    for probability in probabilities:
        for hazard in sharedlosses:
            trial = {}
            trial['certainty'] = certainty
            trial['riskmagnitude'] = riskymagnitude
            trial['probability'] = probability
            trial['sharedloss'] = hazard
            trial['matchedEVW'] = -77
            trial['matchedEVL'] = -77
            trial['rt'] = -77 
            trial['choice'] = -77
            trial['outcome'] = -77
            trial['ttlrew'] = -77
            trial['type'] = 'sharedlossDuane'
            expData.append(trial)
            
for riskymagnitude in riskymagnitudes:
    for probability in probabilities:
        for hazard in sharedlosses:
            trial = {}
            trial['certainty'] = certainty
            trial['riskmagnitude'] = riskymagnitude
            trial['probability'] = probability
            trial['sharedloss'] = hazard
            trial['matchedEVW'] = -77
            trial['matchedEVL'] = -77
            trial['rt'] = -77 
            trial['choice'] = -77
            trial['outcome'] = -77
            trial['ttlrew'] = -77
            trial['type'] = 'sharedlossAsDuane'
            expData.append(trial)
        
for riskymagnitude in riskymagnitudes:
    for probability in probabilities:
        trial = {}
        trial['certainty'] = certainty
        trial['riskmagnitude'] = riskymagnitude
        trial['probability'] = probability
        trial['sharedloss'] = -77
        trial['matchedEVW'] = -77
        trial['matchedEVL'] = -77
        trial['rt'] = -77 
        trial['choice'] = -77
        trial['outcome'] = -77
        trial['ttlrew'] = -77
        trial['type'] = 'standard'
        expData.append(trial)
        
for EVW in matchedEVW:
    for probability in probabilities:
        trial = {}
        trial['certainty'] = certainty
        trial['riskmagnitude'] = -77
        trial['probability'] = probability
        trial['sharedloss'] = -77
        trial['matchedEVW'] = EVW
        trial['matchedEVL'] = EVW/2
        trial['rt'] = -77 
        trial['choice'] = -77
        trial['outcome'] = -77
        trial['ttlrew'] = -77
        trial['type'] = 'matched'
        expData.append(trial)
        
        
expData = misc.shuffleArray(expData)

#print(len(expData))
#for t in expData:
#    print(t)
#core.quit()


#--------------------------------------------------GET USER INFO
dlg = gui.Dlg(title="Decision-Making")
dlg.addText('')
dlg.addField('Subject Number:', 999)
dlg.addText('')
dlg.show()

if dlg.OK:
    SN = int(dlg.data[0])
    fileOut = 'moralhazard_' + str(SN)
    print fileOut

else:
    print 'user cancelled'
    core.quit()
    
#--------------------------------------------------OUTPUT FILE
logFile=open(fileOut+'.dlm', 'a')
logFile.write('\n\nExperiment began at: '+str(datetime.datetime.now()) + '\n\n')
logFile.flush()

#--------------------------------------------------INITIALISE STIMULI

# create a window to draw in
res = [1280.,1024.]

win=visual.Window(res,fullscr=1,bitsMode=None, units='norm', winType='pyglet', color=1., colorSpace='rgb')

y = .08
rewPos = [(-.6, y), (.6, y)]
w = -.65
x = -.24
z = -.08
riskPos = [(-.6, z), (.6, z)]
riskPos2 = [(-.6,x),(.6,x)]
riskpos3 = [(-.6,w),(.6,w)]

ttlrew = 0
a = 0

#--------------------------------------------------INSTRUCTIONS
# clear the screen
win.flip(clearBuffer=True)
# Wait for any key to begin
message = visual.TextStim(win,pos=(0.0,0.0), text='Experimenter, press any key to begin.', color=-1., colorSpace='rgb')
message.draw()
win.flip()

while not event.getKeys():
    pass
win.flip()
core.wait(5, hogCPUperiod = 5)

#--------------------------------------------------RUN TASK
timer = core.Clock()


# Hide the mouse
mouse = event.Mouse()
mouse.setVisible(False)

win.flip()
message = visual.TextStim(win,pos=(0.0,0.0), text='You have been assigned to be Player A.', color=-1., colorSpace='rgb')
message.draw()
win.flip()
core.wait(5, hogCPUperiod = 5)
win.flip()
core.wait(2, hogCPUperiod = 2)
win.flip()

message = visual.TextStim(win,pos=(0.0,0.0), text='As Player A, there is another type of shared loss trial that you will see. In these trials, your losses would be shared with your local partner (Player B), but your local partner would see the loss as coming from the Duane Lab partner. On these trials, it will say "Shared Loss (as Duane Lab Partner) with Local Partner" underneath the risky reward option. Press the Spacebar when done reading.', color=-1., colorSpace='rgb')
message.draw()
win.flip()

event.clearEvents()
while not event.getKeys():
    pass
win.flip()
core.wait(2, hogCPUperiod = 2)
win.flip()


for trial in expData:
    
    trial['time'] = datetime.datetime.now()
    
    a += 1
    trial['trial'] = a
    
    win.flip()
    
    sides = random.random() > .5
    
    drawtrial()
    
    win.flip()
    
    # wait for a choice
    event.getKeys()
    timer.reset()
    
    choice = 0
    rt = 0
    outcome = 0
    event.clearEvents()
    while choice == 0:
        for key in event.getKeys():
            if key in ['left', 'right']:
                rt = timer.getTime()
                choice = key
                
        # log response
    if sides:
        if choice == 'right':
            trial['choice'] = 1
        else:
            trial['choice'] = 0
    else:
        if choice == 'right':
            trial['choice'] = 0
        else:
            trial['choice'] = 1
    trial['rt'] = rt
    
    win.flip()
    
    outcome = drawoutcome(0)

    ttlrew = ttlrew + outcome
    trial['outcome'] = outcome
    trial['ttlrew'] = ttlrew
    
#    core.wait(2)
#    win.flip()
#    core.wait(2)
    
# clear the screen
    win.flip()

#    print(trial)
    log(logFile, trial)
    core.wait(2, hogCPUperiod = 2)

# Unhide the mouse
mouse.setVisible(True)


#--------------------------------------------------ADMINISTER MANIPULATION CHECK

def err(text):
    wx.MessageBox(text, 'Error')

dialog_size = (800, 650)
nickname_field_width = 200

default_wrap_width = 300
def wrapped_text(parent, message, wrap_width = default_wrap_width):
    x = wx.StaticText(parent, label = message)
    x.Wrap(wrap_width)
    return x

class NicknameInputDlg(wx.Dialog):
    def __init__(self, text):
        wx.Dialog.__init__(self, None,
            title = 'My Cool Title',
            size = dialog_size,
            style = wx.DEFAULT_DIALOG_STYLE & ~wx.CLOSE_BOX)

        p = wx.Panel(self)

        self.person_types = shuffled(person_types.keys())
        self.labels = []
        self.fields = []
        for pt in self.person_types:
            self.labels.append(wx.StaticText(p, -1, person_types[pt]))
            self.fields.append(wx.TextCtrl(p, -1, size = (nickname_field_width, -1)))

        space = 5

        sizer = wx.FlexGridSizer(cols = 2, hgap=space, vgap=space)
        for x in concat(zip(self.labels, self.fields)):
            sizer.Add(x, flag = wx.ALIGN_CENTRE_VERTICAL)
        outer = wx.BoxSizer(wx.VERTICAL)
        outer.Add(wrapped_text(p, text, 650),
            flag = wx.ALIGN_CENTRE | wx.TOP,
            border = 10)
        outer.Add(sizer, 1, wx.ALL | wx.EXPAND, 25)
        outer.Add(wx.Button(p, wx.ID_OK), flag = wx.ALIGN_CENTRE)
        p.SetSizerAndFit(outer)

    def get_nicknames(self):
        return {k: x.GetValue().strip()
            for k, x in zip(self.person_types, self.fields)}

d = NicknameInputDlg(
    u"Below is a list of several types of people. Some of these types will include only one person for you, whereas others will include several. For each type, think of a particular person who fits the description. Then, in the blank, write a name we can use to refer to that person for this study. The name could be part of the person's actual name or it could be a short description—whatever is memorable enough that you won't forget what person the name refers to.")
#nicknames = {'remote_partner': u'duaney', 'unmet_classmate': u'class', 'best_friend': u'bff', 'parent': u'parent', 'doctor': u'doc', 'cashier': u'cashier', 'stranger': u'stranger', 'local_partner': u'thatguy', 'dead_relative': u'rel', 'childhood_friend': u'timmy', 'occ_relative': u'unclejoe', 'friend_of_friend': u'foaf'}
while True:
    if d.ShowModal() != wx.ID_OK:
        continue
    nicknames = d.get_nicknames()
    if any(s == "" for s in nicknames.values()):
        err('Please provide a name for every type of person.')
    elif len(set(nicknames.values())) != len(nicknames):
        err('No two names can be identical.')
    else:
        d.Destroy()
        break

class RankingDlg(wx.Dialog):
    def __init__(self, nicknames, text):
        wx.Dialog.__init__(self, None,
            title = 'My Cool Title',
            size = (default_wrap_width + 25, 600),
            style = wx.DEFAULT_DIALOG_STYLE & ~wx.CLOSE_BOX)

        p = wx.Panel(self)

        self.nicknames = nicknames
        self.initial_nickname_order = shuffled(nicknames.values())

        self.lb = wx.ListBox(p,
            #size = (200, 500),
            choices = self.initial_nickname_order)
        self.lb.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown, self.lb)

        sz = wx.BoxSizer(wx.VERTICAL)
        sz.Add((0, 10))
        sz.Add(wrapped_text(p, text), flag = wx.ALIGN_CENTRE)
        sz.Add(self.lb, 1, flag = wx.EXPAND | wx.ALL, border = 10)
        sz.Add(wx.Button(p, wx.ID_OK), 0, flag = wx.ALIGN_CENTRE)
        p.SetSizer(sz)

    def OnKeyDown(self, event):
        keycode = event.GetKeyCode()
        if keycode == wx.WXK_UP:
            incr = -1
        elif keycode == wx.WXK_DOWN:
            incr = 1
        else:
            event.Skip()
            return
        # Move the selected item up or down the list.
        lb = event.GetEventObject()
        i = lb.GetSelection()
        if i + incr in (-1, lb.GetCount()):
          # The user is trying to go past the end of the list.
            return
        strs = lb.GetStrings()
        lb.Delete(i + incr)
        lb.Insert(strs[i + incr], i)

    def get_ranking(self):
        rnicknames = {v: k for k, v in self.nicknames.items()}
        return [rnicknames[k] for k in self.lb.GetStrings()]

d = RankingDlg(nicknames,
    "Now sort these people according to how close you feel to them. Put the person to whom you feel closest at the top and the person from whom you feel most distant at the bottom. Click on a name to select it, then use the arrow keys to move it up and down the list.")
while True:
    if d.ShowModal() == wx.ID_OK:
        break
distance_ranking = d.get_ranking()
d.Destroy()

print >>logFile, json.dumps(dict(nicknames = nicknames, distance_ranking = distance_ranking))

#--------------------------------------------------LOG RESULTS

# clean up the log file
logFile.close()

# pickle the data
with open(fileOut+'.pkl', 'wb') as f:
    pickle.dump(dict(expData = expData, nicknames = nicknames, distance_ranking = distance_ranking),
        f)

#--------------------------------------------------FINISH UP
message = visual.TextStim(win,pos=(0,0), text='Your total earnings: $'+str(ttlrew)+'\n\nYou earned the $5 in real money!', color=[-1,-1,-1] ,colorSpace='rgb')
message.draw()
win.flip()
core.wait(5, hogCPUperiod = 5)
win.flip()
message = visual.TextStim(win,pos=(0,0), text='Done with task!\n\nPlease wait for the experimenter.', color=[-1,-1,-1] ,colorSpace='rgb')
message.draw()
win.flip()
core.wait(5, hogCPUperiod = 5)
while 1:
    if event.getKeys():
        break

mouse.setVisible(1)
win.close()
core.quit()
