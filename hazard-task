#!/usr/bin/env python
# encoding: UTF-8
task = 'undeployed'
cas = []
from psychopy import *
import pyglet
import wx
import os
import time
import datetime
import random, math, itertools
import pickle
import numpy
import json

def concat(x):
    return list(itertools.chain.from_iterable(x))

def shuffled(x):
    return random.sample(x, len(x))

waitKey_delay = .02
def waitKey(keyList = None):
    event.clearEvents('keyboard')
    while True:
        keys = event.getKeys()
        if keys and (keyList is None or keys[0] in keyList):
            return keys[0]
        time.sleep(waitKey_delay)

def log(f, t):
    print >>f, '\t'.join(['{}:\t{}'.format(k, t[k]) for k in (
        'time', 'trial', 'type', 'certainty',
        'riskmagnitude', 'probability', 'sharedloss',
        'rt', 'choice',
        'outcome', 'ttlrew')])
    f.flush()

def msg(x, y, text, height = .1, alignHoriz = 'center', alignVert = 'center', wrapWidth = 1):
    visual.TextStim(win, text = text,
       pos = (x, y), color = 'black', height = height,
       alignHoriz = alignHoriz, alignVert = alignVert,
       wrapWidth = wrapWidth).draw()

def drawtrial():
    msg(0, .75, player_assignments, height = .075,
      wrapWidth = 1.5)

    msg(0, .275, alignVert = 'top', text =
        '100% Win ${}\n\n\n\n{}% Win ${}\n{}% Lose ${}\n\n{}'.format(
        certainty,
        int(trial['probability']*100),
        trial['riskmagnitude'],
        100 - int(trial['probability']*100),
        trial['riskmagnitude'],
#    msg(0, -.5,
        'Shared Loss with\nPlayer A' if trial['type'] == 'sharedlosslocal' else
            'Full Personal Loss'))

    visual.Rect(win, pos = (0, 0), width = 1, height = .01,
        fillColor = 'black').draw()

def drawoutcome(r):
    
    if trial['choice'] == 0:
        rew = certainty
        
    else:
        if trial['type'] == 'sharedlosseslocal':
            if random.random() < trial['probability']:
                rew = trial['riskmagnitude']
                
            else:
                rew = -trial['riskmagnitude']/2
        
        else:
            if random.random() < trial['probability']:
                rew = trial['riskmagnitude']
                
            else:
                rew = -trial['riskmagnitude']
                
    return rew

player_assignments = '''Player A: Your partner
Player B: You'''

#--------------------------------------------------INITIALISE DATA STRUCTURE

expData = []

certainty = 15
catch_magnitude = 10
riskymagnitudes = [20,30,40,50,60] * 2
#sharedloss20 = [16,32,48]
#sharedloss50 = [10,20,30]
probabilities = [.5,.6,.7,.8]
#percents = [50,60,70,80,90]
#sharedlosses = [20,50]
sharedlosses = [50]


for riskymagnitude in riskymagnitudes:
    for probability in probabilities:
        for hazard in sharedlosses:
            trial = {}
            trial['certainty'] = certainty
            trial['riskmagnitude'] = riskymagnitude
            trial['probability'] = probability
            trial['sharedloss'] = hazard
            trial['rt'] = -77 
            trial['choice'] = -77
            trial['outcome'] = -77
            trial['ttlrew'] = -77
            trial['type'] = 'sharedlosslocal'
            expData.append(trial)
        
for riskymagnitude in riskymagnitudes:
    for probability in probabilities:
        trial = {}
        trial['certainty'] = certainty
        trial['riskmagnitude'] = riskymagnitude
        trial['probability'] = probability
        trial['sharedloss'] = -77
        trial['rt'] = -77 
        trial['choice'] = -77
        trial['outcome'] = -77
        trial['ttlrew'] = -77
        trial['type'] = 'standard'
        expData.append(trial)
        
for probability in probabilities:
    trial = {}
    trial['certainty'] = certainty
    trial['riskmagnitude'] = catch_magnitude
    trial['probability'] = probability
    trial['sharedloss'] = -77
    trial['rt'] = -77
    trial['choice'] = -77
    trial['outcome'] = -77
    trial['ttlrew'] = -77
    trial['type'] = 'catch'
    expData.append(trial)
        
expData = misc.shuffleArray(expData)

#print(len(expData))
#for t in expData:
#    print(t)
#core.quit()


#--------------------------------------------------GET USER INFO
dlg = gui.Dlg(title="Decision-Making")
dlg.addText('')
dlg.addField('Subject Number:', 999)
dlg.addText('')
dlg.show()

if dlg.OK:
    SN = int(dlg.data[0])
    fileOut = 'moralhazard_' + str(SN)
    print fileOut

else:
    print 'user cancelled'
    core.quit()
    
#--------------------------------------------------OUTPUT FILE
logFile=open(fileOut+'.dlm', 'a')
logFile.write('\n\nExperiment began at: '+str(datetime.datetime.now()) + '\n\n')
logFile.flush()

#--------------------------------------------------INITIALISE STIMULI

# create a window to draw in
pyglet_screen = pyglet.window.get_platform().get_default_display().get_default_screen()
win = visual.Window((pyglet_screen.width, pyglet_screen.height),
    winType = 'pyglet', fullscr = False,
    units = 'norm', color = 'white')

ttlrew = 0

#--------------------------------------------------INSTRUCTIONS
# clear the screen
win.flip(clearBuffer=True)
# Wait for any key to begin
message = visual.TextStim(win,pos=(0.0,0.0), text='Experimenter, press any key to begin.', color=-1., colorSpace='rgb')
message.draw()
win.flip()

# Hide the mouse
mouse = event.Mouse()
mouse.setVisible(False)

waitKey()
time.sleep(.2)

reputation_condition = ['Anonymous', 'Visible'][cas[SN]
    if SN >= 0 and SN < len(cas)
    else random.choice([0, 1])]
reputation_message_start = 'As Player B, you will have the opportunity to take gambles that could benefit you but could also make your partner less likely to win $5.'
reputation_messages = dict(
    Anonymous = 'Your partner will not be told what choices you made or whether you affected their chances of winning $5.',
    Visible = 'After the task is complete, your partner will see a complete list of the choices you made and how you affected their chances of winning $5. The two of you will then have the opportunity to discuss your choices.')

message = visual.TextStim(win,pos=(0.0,0.0), color=-1., colorSpace='rgb',
    wrapWidth = 1.5,
    text='\n\n'.join([
        'Player assignments:',
        player_assignments,
        reputation_message_start + ' ' + reputation_messages[reputation_condition],
        'Press the spacebar to continue.']))
message.draw()
win.flip()
waitKey()

time.sleep(2)
win.flip()

#--------------------------------------------------RUN GAMBLING TASK

timer = core.Clock()

for tn, trial in enumerate(expData):
    
    trial['time'] = datetime.datetime.now()
    
    trial['trial'] = tn + 1
    
    win.flip()
    
    drawtrial()
    
    win.flip()
    
    # wait for a choice
    timer.reset()

    outcome = 0
    choice = waitKey(keyList = ['up', 'down'])
    rt = timer.getTime()
                
    # log response
    trial['choice'] = int(choice == 'down')
    trial['rt'] = rt
    
    win.flip()
    
    outcome = drawoutcome(0)

    ttlrew = ttlrew + outcome
    trial['outcome'] = outcome
    trial['ttlrew'] = ttlrew
    
#    time.sleep(2)
#    win.flip()
#    time.sleep(2)
    
# clear the screen
    win.flip()

#    print(trial)
    log(logFile, trial)
    time.sleep(2)

#--------------------------------------------------LOG RESULTS

print >>logFile
print >>logFile, json.dumps(dict(task = task, reputation_condition = reputation_condition))

# clean up the log file
logFile.close()

# pickle the data
with open(fileOut+'.pkl', 'wb') as f:
    pickle.dump(dict(task = task, expData = expData, reputation_condition = reputation_condition),
        f)

#--------------------------------------------------FINISH UP
message = visual.TextStim(win,pos=(0,0), text='Your total earnings: $'+str(ttlrew)+'\n\nYou earned the $5 in real money!', color=[-1,-1,-1] ,colorSpace='rgb')
message.draw()
win.flip()
time.sleep(5)
win.flip()
message = visual.TextStim(win,pos=(0,0), text='Done with task!\n\nPlease wait for the experimenter.', color=[-1,-1,-1] ,colorSpace='rgb')
message.draw()
win.flip()
time.sleep(5)
waitKey()

mouse.setVisible(1)
win.close()
core.quit()
